#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace COMPASS.ORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="COMPASS")]
	public partial class CompassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChoice(Choice instance);
    partial void UpdateChoice(Choice instance);
    partial void DeleteChoice(Choice instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    #endregion
		
		public CompassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["COMPASSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Choice> Choices
		{
			get
			{
				return this.GetTable<Choice>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<AddressList> AddressLists
		{
			get
			{
				return this.GetTable<AddressList>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Choices")]
	public partial class Choice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _QuestionID;
		
		private byte _ChoiceID;
		
		private string _ChoiceText;
		
		private System.Nullable<byte> _ChoiceSerial;
		
		private System.Nullable<int> _RefValue;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnChoiceIDChanging(byte value);
    partial void OnChoiceIDChanged();
    partial void OnChoiceTextChanging(string value);
    partial void OnChoiceTextChanged();
    partial void OnChoiceSerialChanging(System.Nullable<byte> value);
    partial void OnChoiceSerialChanged();
    partial void OnRefValueChanging(System.Nullable<int> value);
    partial void OnRefValueChanged();
    #endregion
		
		public Choice()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ChoiceID
		{
			get
			{
				return this._ChoiceID;
			}
			set
			{
				if ((this._ChoiceID != value))
				{
					this.OnChoiceIDChanging(value);
					this.SendPropertyChanging();
					this._ChoiceID = value;
					this.SendPropertyChanged("ChoiceID");
					this.OnChoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceText", DbType="NVarChar(250)")]
		public string ChoiceText
		{
			get
			{
				return this._ChoiceText;
			}
			set
			{
				if ((this._ChoiceText != value))
				{
					this.OnChoiceTextChanging(value);
					this.SendPropertyChanging();
					this._ChoiceText = value;
					this.SendPropertyChanged("ChoiceText");
					this.OnChoiceTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceSerial", DbType="TinyInt")]
		public System.Nullable<byte> ChoiceSerial
		{
			get
			{
				return this._ChoiceSerial;
			}
			set
			{
				if ((this._ChoiceSerial != value))
				{
					this.OnChoiceSerialChanging(value);
					this.SendPropertyChanging();
					this._ChoiceSerial = value;
					this.SendPropertyChanged("ChoiceSerial");
					this.OnChoiceSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefValue", DbType="Int")]
		public System.Nullable<int> RefValue
		{
			get
			{
				return this._RefValue;
			}
			set
			{
				if ((this._RefValue != value))
				{
					this.OnRefValueChanging(value);
					this.SendPropertyChanging();
					this._RefValue = value;
					this.SendPropertyChanged("RefValue");
					this.OnRefValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Choice", Storage="_Question", ThisKey="CategoryID,QuestionID", OtherKey="CategoryID,QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Choices.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Choices.Add(this);
						this._CategoryID = value.CategoryID;
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._CategoryID = default(int);
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _QuestionID;
		
		private string _QuestionText;
		
		private System.Nullable<byte> _QuestionSerial;
		
		private EntitySet<Choice> _Choices;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnQuestionSerialChanging(System.Nullable<byte> value);
    partial void OnQuestionSerialChanged();
    #endregion
		
		public Question()
		{
			this._Choices = new EntitySet<Choice>(new Action<Choice>(this.attach_Choices), new Action<Choice>(this.detach_Choices));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="NVarChar(250)")]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionSerial", DbType="TinyInt")]
		public System.Nullable<byte> QuestionSerial
		{
			get
			{
				return this._QuestionSerial;
			}
			set
			{
				if ((this._QuestionSerial != value))
				{
					this.OnQuestionSerialChanging(value);
					this.SendPropertyChanging();
					this._QuestionSerial = value;
					this.SendPropertyChanged("QuestionSerial");
					this.OnQuestionSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Choice", Storage="_Choices", ThisKey="CategoryID,QuestionID", OtherKey="CategoryID,QuestionID")]
		public EntitySet<Choice> Choices
		{
			get
			{
				return this._Choices;
			}
			set
			{
				this._Choices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Question", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Description;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Question", Storage="_Questions", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressList")]
	public partial class AddressList
	{
		
		private int _AddressSerial;
		
		private string _Contracted_Name;
		
		private string _Contracted_Address;
		
		private string _City;
		
		private string _State_Abbreviation;
		
		private System.Nullable<double> _ZIP;
		
		private System.Nullable<double> _ZIP_Plus_4;
		
		private string _Carrier_Route;
		
		private System.Nullable<double> _Delivery_Point_Code;
		
		private System.Nullable<double> _Ethnic_Groups;
		
		private string _Household_Age;
		
		private System.Nullable<double> _Geo_Tract;
		
		public AddressList()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressSerial", DbType="Int NOT NULL")]
		public int AddressSerial
		{
			get
			{
				return this._AddressSerial;
			}
			set
			{
				if ((this._AddressSerial != value))
				{
					this._AddressSerial = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Contracted Name]", Storage="_Contracted_Name", DbType="NVarChar(255)")]
		public string Contracted_Name
		{
			get
			{
				return this._Contracted_Name;
			}
			set
			{
				if ((this._Contracted_Name != value))
				{
					this._Contracted_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Contracted Address]", Storage="_Contracted_Address", DbType="NVarChar(255)")]
		public string Contracted_Address
		{
			get
			{
				return this._Contracted_Address;
			}
			set
			{
				if ((this._Contracted_Address != value))
				{
					this._Contracted_Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[State Abbreviation]", Storage="_State_Abbreviation", DbType="NVarChar(255)")]
		public string State_Abbreviation
		{
			get
			{
				return this._State_Abbreviation;
			}
			set
			{
				if ((this._State_Abbreviation != value))
				{
					this._State_Abbreviation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIP", DbType="Float")]
		public System.Nullable<double> ZIP
		{
			get
			{
				return this._ZIP;
			}
			set
			{
				if ((this._ZIP != value))
				{
					this._ZIP = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ZIP-Plus 4]", Storage="_ZIP_Plus_4", DbType="Float")]
		public System.Nullable<double> ZIP_Plus_4
		{
			get
			{
				return this._ZIP_Plus_4;
			}
			set
			{
				if ((this._ZIP_Plus_4 != value))
				{
					this._ZIP_Plus_4 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Carrier Route]", Storage="_Carrier_Route", DbType="NVarChar(255)")]
		public string Carrier_Route
		{
			get
			{
				return this._Carrier_Route;
			}
			set
			{
				if ((this._Carrier_Route != value))
				{
					this._Carrier_Route = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Delivery Point Code]", Storage="_Delivery_Point_Code", DbType="Float")]
		public System.Nullable<double> Delivery_Point_Code
		{
			get
			{
				return this._Delivery_Point_Code;
			}
			set
			{
				if ((this._Delivery_Point_Code != value))
				{
					this._Delivery_Point_Code = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Ethnic Groups]", Storage="_Ethnic_Groups", DbType="Float")]
		public System.Nullable<double> Ethnic_Groups
		{
			get
			{
				return this._Ethnic_Groups;
			}
			set
			{
				if ((this._Ethnic_Groups != value))
				{
					this._Ethnic_Groups = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Household Age]", Storage="_Household_Age", DbType="NVarChar(255)")]
		public string Household_Age
		{
			get
			{
				return this._Household_Age;
			}
			set
			{
				if ((this._Household_Age != value))
				{
					this._Household_Age = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Geo Tract]", Storage="_Geo_Tract", DbType="Float")]
		public System.Nullable<double> Geo_Tract
		{
			get
			{
				return this._Geo_Tract;
			}
			set
			{
				if ((this._Geo_Tract != value))
				{
					this._Geo_Tract = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
